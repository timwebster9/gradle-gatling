pipeline {

    agent {
        node {
            label 'mac'
        }
    }
    stages {
        stage('Cleanup') {
            steps {
                deleteDir()
            }
        }
        stage('Gatling Test') {
            steps {
                script {
                    withDocker('hmcts/moj-gatling-image:2.3.1-1.0', '-u root -v $WORKSPACE/src/gatling/conf:/etc/gatling/conf -v $WORKSPACE/src/gatling/user-files:/etc/gatling/user-files') {


                        waitUntil {
                            // some block
                        }


                        sh 'ls -la /etc/gatling'

                        sh 'ls -la /etc/gatling/conf'

                        sh 'ls -la /etc/gatling/user-files'

                        sh 'gatling.sh -m -rf /etc/gatling/reports'

                    }

                    sh 'ls -la $WORKSPACE/build/gatling/reports'

                    sh 'ls -la $WORKSPACE/build/gatling/binaries'

                }
            }
        }
        stage('Azure upload') {
            steps {
                script {
                    withDocker('hmcts/moj-azcopy-image:7.2.0-netcore-1.0', '-u root') {
                        withCredentials([usernamePassword(credentialsId: "storage-key", passwordVariable: 'STORAGE_ACCOUNT_KEY', usernameVariable: 'STORAGE_ACCOUNT_NAME')]) {
                            sh "azcopy --source $WORKSPACE/build/gatling/reports \
                                --destination https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/gatling-store/jenkins-test \
                                --dest-key ${STORAGE_ACCOUNT_KEY} \
                                --recursive"
                        }
                    }
                }
            }
        }
        /*
        stage('Docker Build') {
            steps {
                container('docker') {
                   sh 'docker build -t timw/boot-app:1.0 .'
                }
            }
        }
        stage('Deploy App') {
            steps {
                container('kubectl') {
                   sh 'kubectl config set-cluster k8s --server=https://kubernetes.default.svc'
                   sh 'kubectl apply -f spec.yaml'
                }
            }
        }
        stage('Wait for App') {
            steps {
                timeout(5) {
                    waitUntil {
                       script {
                         def r = sh script: 'wget -q http://boot-app-service.default -O /dev/null', returnStatus: true
                         return (r == 0);
                       }
                    }
                }
            }
        }
        stage('Performance Test') {
            steps {
                container('java') {
                    withEnv(['BASE_URL=http://boot-app-service.default']) {
                        sh './gradlew gatlingRun'
                    }
                }
            }
        }
        stage('Tear Down') {
            steps {
                container('kubectl') {
                   sh 'kubectl config set-cluster k8s --server=https://kubernetes.default.svc'
                   sh 'kubectl delete -f spec.yaml'
                }
            }
        }
        */
    }
}
